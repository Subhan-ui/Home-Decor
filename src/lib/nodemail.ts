import nodemailer from 'nodemailer'

const transporter = nodemailer.createTransport({
    service: "Gmail", 
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD,
    },
  });

  export async function sendVerificationEmail(email: string, verificationCode: string) {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Email Verification",
      text: `Your verification code is: ${verificationCode}`,
    };
  
    await transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('❌ Error:', error.message);
      } else {
        console.log('✅ Email sent:', info.response);
      }});
  }


  // {
  //   req: IncomingMessage {
  //     _readableState: ReadableState {
  //       objectMode: false,
  //       highWaterMark: 16384,
  //       buffer: BufferList { head: null, tail: null, length: 0 },
  //       length: 0,
  //       pipes: [],
  //       flowing: false,
  //       ended: true,
  //       endEmitted: true,
  //       reading: false,
  //       constructed: true,
  //       sync: false,
  //       needReadable: false,
  //       emittedReadable: false,
  //       readableListening: true,
  //       resumeScheduled: false,
  //       errorEmitted: false,
  //       emitClose: true,
  //       autoDestroy: true,
  //       destroyed: true,
  //       errored: null,
  //       closed: true,
  //       closeEmitted: true,
  //       defaultEncoding: 'utf8',
  //       awaitDrainWriters: null,
  //       multiAwaitDrain: false,
  //       readingMore: false,
  //       dataEmitted: true,
  //       decoder: null,
  //       encoding: null,
  //       [Symbol(kPaused)]: null
  //     },
  //     _events: [Object: null prototype] {
  //       readable: [Function: next],
  //       end: [Function: onend],
  //       finish: [Function: onfinish],
  //       error: [Function: onerror],
  //       close: [Function: onclose]
  //     },
  //     _eventsCount: 5,
  //     _maxListeners: undefined,
  //     socket: Socket {
  //       connecting: false,
  //       _hadError: false,
  //       _parent: null,
  //       _host: null,
  //       _closeAfterHandlingError: false,
  //       _readableState: [ReadableState],
  //       _events: [Object: null prototype],
  //       _eventsCount: 8,
  //       _maxListeners: undefined,
  //       _writableState: [WritableState],
  //       allowHalfOpen: true,
  //       _sockname: null,
  //       _pendingData: null,
  //       _pendingEncoding: '',
  //       server: [Server],
  //       _server: [Server],
  //       parser: [HTTPParser],
  //       on: [Function: socketListenerWrap],
  //       addListener: [Function: socketListenerWrap],
  //       prependListener: [Function: socketListenerWrap],
  //       setEncoding: [Function: socketSetEncoding],
  //       _paused: false,
  //       _httpMessage: [ServerResponse],
  //       [Symbol(async_id_symbol)]: 14,
  //       [Symbol(kHandle)]: [TCP],
  //       [Symbol(lastWriteQueueSize)]: 0,
  //       [Symbol(timeout)]: null,
  //       [Symbol(kBuffer)]: null,
  //       [Symbol(kBufferCb)]: null,
  //       [Symbol(kBufferGen)]: null,
  //       [Symbol(kCapture)]: false,
  //       [Symbol(kSetNoDelay)]: true,
  //       [Symbol(kSetKeepAlive)]: false,
  //       [Symbol(kSetKeepAliveInitialDelay)]: 0,
  //       [Symbol(kBytesRead)]: 0,
  //       [Symbol(kBytesWritten)]: 0
  //     },
  //     httpVersionMajor: 1,
  //     httpVersionMinor: 1,
  //     httpVersion: '1.1',
  //     complete: true,
  //     rawHeaders: [
  //       'Host',
  //       'localhost:4000',
  //       'Connection',
  //       'keep-alive',
  //       'Content-Length',
  //       '361',
  //       'sec-ch-ua',
  //       '"Chromium";v="128", "Not;A=Brand";v="24", "Google Chrome";v="128"',
  //       'accept',
  //       'application/graphql-response+json, application/json, multipart/mixed',
  //       'sec-ch-ua-platform',
  //       '"Windows"',
  //       'sec-ch-ua-mobile',
  //       '?0',
  //       'authorization',
  //       'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNtMHkwanl4bDAwMDB1cjhwN2FlNzF0NXUiLCJuYW1lIjoiU3ViaGFuIFNob3VrYXQiLCJlbWFpbCI6ImRhYml2aTM2NzhAYmFyYWthbC5jb20iLCJpYXQiOjE3MjYwNzExMDMsImV4cCI6MTcyNjA3MjkwM30.fpfriyveuSvrD6ybrHK70_AnEsaCnSIo9I2ytr6Mosg',
  //       'User-Agent',
  //       'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',
  //       'content-type',
  //       'application/json',
  //       'Origin',
  //       'http://localhost:4000',
  //       'Sec-Fetch-Site',
  //       'same-origin',
  //       'Sec-Fetch-Mode',
  //       'cors',
  //       'Sec-Fetch-Dest',
  //       'empty',
  //       'Referer',
  //       'http://localhost:4000/graphql?query=mutation+%7B%0A+uploadImage%28picture%3A%22subhan31.jpg%22%29%0A++%0A%7D',
  //       'Accept-Encoding',
  //       'gzip, deflate, br, zstd',
  //       'Accept-Language',
  //       'en-GB,en;q=0.9'
  //     ],
  //     rawTrailers: [],
  //     joinDuplicateHeaders: undefined,
  //     aborted: false,
  //     upgrade: false,
  //     url: '/graphql',
  //     method: 'POST',
  //     statusCode: null,
  //     statusMessage: null,
  //     client: Socket {
  //       connecting: false,
  //       _hadError: false,
  //       _parent: null,
  //       _host: null,
  //       _closeAfterHandlingError: false,
  //       _readableState: [ReadableState],
  //       _events: [Object: null prototype],
  //       _eventsCount: 8,
  //       _maxListeners: undefined,
  //       _writableState: [WritableState],
  //       allowHalfOpen: true,
  //       _sockname: null,
  //       _pendingData: null,
  //       _pendingEncoding: '',
  //       server: [Server],
  //       _server: [Server],
  //       parser: [HTTPParser],
  //       on: [Function: socketListenerWrap],
  //       addListener: [Function: socketListenerWrap],
  //       prependListener: [Function: socketListenerWrap],
  //       setEncoding: [Function: socketSetEncoding],
  //       _paused: false,
  //       _httpMessage: [ServerResponse],
  //       [Symbol(async_id_symbol)]: 14,
  //       [Symbol(kHandle)]: [TCP],
  //       [Symbol(lastWriteQueueSize)]: 0,
  //       [Symbol(timeout)]: null,
  //       [Symbol(kBuffer)]: null,
  //       [Symbol(kBufferCb)]: null,
  //       [Symbol(kBufferGen)]: null,
  //       [Symbol(kCapture)]: false,
  //       [Symbol(kSetNoDelay)]: true,
  //       [Symbol(kSetKeepAlive)]: false,
  //       [Symbol(kSetKeepAliveInitialDelay)]: 0,
  //       [Symbol(kBytesRead)]: 0,
  //       [Symbol(kBytesWritten)]: 0
  //     },
  //     _consuming: true,
  //     _dumped: false,
  //     [Symbol(kCapture)]: false,
  //     [Symbol(kHeaders)]: {
  //       host: 'localhost:4000',
  //       connection: 'keep-alive',
  //       'content-length': '361',
  //       'sec-ch-ua': '"Chromium";v="128", "Not;A=Brand";v="24", "Google Chrome";v="128"',
  //       accept: 'application/graphql-response+json, application/json, multipart/mixed',
  //       'sec-ch-ua-platform': '"Windows"',
  //       'sec-ch-ua-mobile': '?0',
  //       authorization: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNtMHkwanl4bDAwMDB1cjhwN2FlNzF0NXUiLCJuYW1lIjoiU3ViaGFuIFNob3VrYXQiLCJlbWFpbCI6ImRhYml2aTM2NzhAYmFyYWthbC5jb20iLCJpYXQiOjE3MjYwNzExMDMsImV4cCI6MTcyNjA3MjkwM30.fpfriyveuSvrD6ybrHK70_AnEsaCnSIo9I2ytr6Mosg',
  //       'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36',
  //       'content-type': 'application/json',
  //       origin: 'http://localhost:4000',
  //       'sec-fetch-site': 'same-origin',
  //       'sec-fetch-mode': 'cors',
  //       'sec-fetch-dest': 'empty',
  //       referer: 'http://localhost:4000/graphql?query=mutation+%7B%0A+uploadImage%28picture%3A%22subhan31.jpg%22%29%0A++%0A%7D',
  //       'accept-encoding': 'gzip, deflate, br, zstd',
  //       'accept-language': 'en-GB,en;q=0.9'
  //     },
  //     [Symbol(kHeadersCount)]: 34,
  //     [Symbol(kTrailers)]: null,
  //     [Symbol(kTrailersCount)]: 0
  //   },
  //   res: <ref *1> ServerResponse {
  //     _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  //     _eventsCount: 1,
  //     _maxListeners: undefined,
  //     outputData: [],
  //     outputSize: 0,
  //     writable: true,
  //     destroyed: false,
  //     _last: false,
  //     chunkedEncoding: false,
  //     shouldKeepAlive: true,
  //     maxRequestsOnConnectionReached: false,
  //     _defaultKeepAlive: true,
  //     useChunkedEncodingByDefault: true,
  //     sendDate: true,
  //     _removedConnection: false,
  //     _removedContLen: false,
  //     _removedTE: false,
  //     strictContentLength: false,
  //     _contentLength: null,
  //     _hasBody: true,
  //     _trailer: '',
  //     finished: false,
  //     _headerSent: false,
  //     _closed: false,
  //     socket: Socket {
  //       connecting: false,
  //       _hadError: false,
  //       _parent: null,
  //       _host: null,
  //       _closeAfterHandlingError: false,
  //       _readableState: [ReadableState],
  //       _events: [Object: null prototype],
  //       _eventsCount: 8,
  //       _maxListeners: undefined,
  //       _writableState: [WritableState],
  //       allowHalfOpen: true,
  //       _sockname: null,
  //       _pendingData: null,
  //       _pendingEncoding: '',
  //       server: [Server],
  //       _server: [Server],
  //       parser: [HTTPParser],
  //       on: [Function: socketListenerWrap],
  //       addListener: [Function: socketListenerWrap],
  //       prependListener: [Function: socketListenerWrap],
  //       setEncoding: [Function: socketSetEncoding],
  //       _paused: false,
  //       _httpMessage: [Circular *1],
  //       [Symbol(async_id_symbol)]: 14,
  //       [Symbol(kHandle)]: [TCP],
  //       [Symbol(lastWriteQueueSize)]: 0,
  //       [Symbol(timeout)]: null,
  //       [Symbol(kBuffer)]: null,
  //       [Symbol(kBufferCb)]: null,
  //       [Symbol(kBufferGen)]: null,
  //       [Symbol(kCapture)]: false,
  //       [Symbol(kSetNoDelay)]: true,
  //       [Symbol(kSetKeepAlive)]: false,
  //       [Symbol(kSetKeepAliveInitialDelay)]: 0,
  //       [Symbol(kBytesRead)]: 0,
  //       [Symbol(kBytesWritten)]: 0
  //     },
  //     _header: null,
  //     _keepAliveTimeout: 5000,
  //     _onPendingData: [Function: bound updateOutgoingData],
  //     req: IncomingMessage {
  //       _readableState: [ReadableState],
  //       _events: [Object: null prototype],
  //       _eventsCount: 5,
  //       _maxListeners: undefined,
  //       socket: [Socket],
  //       httpVersionMajor: 1,
  //       httpVersionMinor: 1,
  //       httpVersion: '1.1',
  //       complete: true,
  //       rawHeaders: [Array],
  //       rawTrailers: [],
  //       joinDuplicateHeaders: undefined,
  //       aborted: false,
  //       upgrade: false,
  //       url: '/graphql',
  //       method: 'POST',
  //       statusCode: null,
  //       statusMessage: null,
  //       client: [Socket],
  //       _consuming: true,
  //       _dumped: false,
  //       [Symbol(kCapture)]: false,
  //       [Symbol(kHeaders)]: [Object],
  //       [Symbol(kHeadersCount)]: 34,
  //       [Symbol(kTrailers)]: null,
  //       [Symbol(kTrailersCount)]: 0
  //     },
  //     _sent100: false,
  //     _expect_continue: false,
  //     _maxRequestsPerSocket: 0,
  //     [Symbol(kCapture)]: false,
  //     [Symbol(kBytesWritten)]: 0,
  //     [Symbol(kNeedDrain)]: false,
  //     [Symbol(corked)]: 0,
  //     [Symbol(kOutHeaders)]: null,
  //     [Symbol(errored)]: null,
  //     [Symbol(kHighWaterMark)]: 16384,
  //     [Symbol(kRejectNonStandardBodyWrites)]: false,
  //     [Symbol(kUniqueHeaders)]: null
  //   },
  //   waitUntil: [Function: waitUntil],
  //   request: PonyfillRequest {
  //     bodyInit: IncomingMessage {
  //       _readableState: [ReadableState],
  //       _events: [Object: null prototype],
  //       _eventsCount: 5,
  //       _maxListeners: undefined,
  //       socket: [Socket],
  //       httpVersionMajor: 1,
  //       httpVersionMinor: 1,
  //       httpVersion: '1.1',
  //       complete: true,
  //       rawHeaders: [Array],
  //       rawTrailers: [],
  //       joinDuplicateHeaders: undefined,
  //       aborted: false,
  //       upgrade: false,
  //       url: '/graphql',
  //       method: 'POST',
  //       statusCode: null,
  //       statusMessage: null,
  //       client: [Socket],
  //       _consuming: true,
  //       _dumped: false,
  //       [Symbol(kCapture)]: false,
  //       [Symbol(kHeaders)]: [Object],
  //       [Symbol(kHeadersCount)]: 34,
  //       [Symbol(kTrailers)]: null,
  //       [Symbol(kTrailersCount)]: 0
  //     },
  //     options: { method: 'POST', headers: [Object], body: [IncomingMessage] },
  //     bodyUsed: false,
  //     contentType: 'application/json',
  //     contentLength: 361,
  //     _bodyFactory: [Function: bodyFactory],
  //     _generatedBody: PonyfillReadableStream {
  //       locked: false,
  //       readable: [IncomingMessage]
  //     },
  //     bodyType: 'Readable',
  //     destination: '',
  //     priority: 'auto',
  //     cache: 'default',
  //     credentials: 'same-origin',
  //     headers: PonyfillHeaders {
  //       headersInit: [Object],
  //       map: Map(0) {},
  //       mapIsBuilt: false,
  //       objectNormalizedKeysOfHeadersInit: [],
  //       objectOriginalKeysOfHeadersInit: []
  //     },
  //     integrity: '',
  //     keepalive: false,
  //     method: 'POST',
  //     mode: 'cors',
  //     redirect: 'follow',
  //     referrer: 'about:client',
  //     referrerPolicy: 'no-referrer',
  //     signal: PonyfillAbortSignal {},
  //     headersSerializer: [Function: getHeadersObj],
  //     url: 'http://localhost:4000/graphql'
  //   },
  //   params: {
  //     query: 'mutation {\n  uploadImage(picture: "subhan31.jpg")\n}',
  //     extensions: { headers: [Object] }
  //   }
  // }