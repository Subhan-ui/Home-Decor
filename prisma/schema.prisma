generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

model User {
  id               String          @id @unique @default(cuid())
  name             String
  email            String          @unique
  mobileNumber     String?          @unique
  dateOfBirth      DateTime?
  password         String?
  isEmailVerified  Boolean         @default(false)
  verificationCode String?
  role             Role            @default(USER)
  resetToken       String?
  resetTokenExpiry DateTime?
  profilePicture   String?
  refreshToken     String?
  address          Address?
  furnitureItem    FurnitureItem[]
  orders           Order[]
  cartItems        CartItem[]
  favourites       Favourite[]
  reviews          Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Address {
  id         String @id @default(cuid())
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String @unique
  street     String
  city       String
  state      String
  postalCode String
  country    String

  createdAt DateTime @default(now())
}

model FurnitureItem {
  id            String      @id @default(cuid())
  name          String
  description   String
  price         Float
  picture       String?
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  reviews       Review[]
  favourites    Favourite[]
  cartItems     CartItem[]
  furnitureItem OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  id             String          @id @default(cuid())
  name           Categories
  subCategories  SubCategory[]
  furnitureItems FurnitureItem[]
}

model SubCategory {
  id             String          @id @default(cuid())
  name           String
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     String
  furnitureItems FurnitureItem[]
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  totalPrice Float
  status     OrderStatus @default(PENDING)
  items      OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OrderItem {
  id              String        @id @default(cuid())
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  furnitureItem   FurnitureItem @relation(fields: [furnitureItemId], references: [id])
  furnitureItemId String
  quantity        Int
  price           Float

  createdAt DateTime @default(now())
}

model CartItem {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  furnitureItem   FurnitureItem @relation(fields: [furnitureItemId], references: [id], onDelete: Cascade)
  furnitureItemId String
  quantity        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Favourite {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  furnitureItem   FurnitureItem @relation(fields: [furnitureItemId], references: [id], onDelete: Cascade)
  furnitureItemId String

  createdAt DateTime @default(now())
}

model Review {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  furnitureItem   FurnitureItem @relation(fields: [furnitureItemId], references: [id], onDelete: Cascade)
  furnitureItemId String
  rating          Rating
  comment         String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Rating {
  WORST
  BAD
  NORMAL
  GOOD
  BEST
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELED
}

enum Categories {
  BedRoom
  LivingRoom
  Kitchen
  Office
  DinningRoom
}
